YTPS - Yandex Transport Proxy Server protocol.

Version = 1.0.1

getCurrentQueue                       - will return current Query Queue of the server.
                                         Does not add itself to the Query Queue.

getEcho?id=...?                       - test command, will add itself to Query Queue and execute in order with
                                         get...Info queries. Will return string after ?

getStopInfo?id=...?...               - add getStopInfo to the Query Queue, paste Yandex URL after "?"
                                        will return {"response": "OK", "queue_position":"size of the queue"}
                                        if successful.

getVehiclesInfo?id=...?...           - add getStopInfo to the Query Queue, paste Yandex URL after "?"
                                        will return {"response": "OK", "queue_position":"size of the queue"}
                                        if successful.
                                        Note: Seems to be deprecated starting 25-03-2019

getVehiclesInfoWithRegion?id=...?... - new Yandex method to get vehicles info.

getRouteInfo?id=...?...              - add getRouteInfo to Query Queue, paster Yandex URL after "?"
                                       will return {"response": "OK", "queue_position":"size of the queue"} if successful

getAllInfo?id=...?                   - special command, also requires Yandex URL after ?, will return all "get...Info"
                                       responses it will find, like getRouteInfo and getVehicle info are returned by
                                       clicking on the transit stop, using the same URL.

# ----------------------------------- Not implemented, under consideration ------------------------------------------- #
watchVehiclesInfo?id=...?            - start watching for vehicles info, passing out any subsequent getVehiclesInfo
                                       responses it will receive from Yandex. Will block ANY other "get...Info" query \
                                       until cancelled.
                                       One server - one "watch" instance. Use more Docker containers to watch more routes,
                                       watch must be in active browser window to work properly.

cancelWatch                          - cancel watch, resume normal operations.